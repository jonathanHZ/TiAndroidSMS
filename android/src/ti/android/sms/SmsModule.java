/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.android.sms;

import java.util.ArrayList;

import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBaseActivity;
import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.telephony.SmsManager;
import android.Manifest;
import android.app.Activity;
import android.content.pm.PackageManager;
import android.os.Build;

@Kroll.module(name="Sms", id="ti.android.sms")
public class SmsModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "SmsModule";
	private static final boolean DBG = TiConfig.LOGD;

	private static final String MESSAGE_SENT = "SMS_SENT";
	private static final String MESSAGE_DELIVERED = "SMS_DELIVERED";
	
	private BroadcastReceiver sendBroadcastReceiver;
	private BroadcastReceiver deliveryBroadcastReceiver;
	
	
	@Kroll.constant
	public static final int SENT = 0;
	@Kroll.constant
	public static final int DELIVERED = 1;
	@Kroll.constant
	public static final int CANCELLED = -1;
	@Kroll.constant
	public static final int FAILED = -2;

	
	
	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public SmsModule()
	{
		super();
		setupIntentReceivers();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
	}

	
	void setupIntentReceivers() {
		
		Activity currentActivity = TiApplication.getInstance().getCurrentActivity();
		
		//let's register broadcast receivers
		sendBroadcastReceiver = new BroadcastReceiver(){
			@Override
			public void onReceive(Context context, Intent intent) {
				KrollDict event;
				switch (getResultCode())
				{
				case Activity.RESULT_OK:
					event = createEventObject(true, SENT, "Message sent");
					Log.d(LCAT, "message sent");
					fireEvent("complete", event);
					break;
				default: 
					event = createEventObject(false, FAILED, "Message delivery failed");
					Log.d(LCAT, "message sending failure");
					fireEvent("complete", event);
					break;
				}
			}
		};
		
		//---when the SMS has been sent---
		currentActivity.registerReceiver(sendBroadcastReceiver, new IntentFilter(MESSAGE_SENT));

		
		deliveryBroadcastReceiver = new BroadcastReceiver(){
			@Override
			public void onReceive(Context context, Intent intent) {
				KrollDict event;
				switch (getResultCode())
				{
				case Activity.RESULT_OK:
					event = createEventObject(true, DELIVERED, "Message delivered");
					Log.d(LCAT, "message delivered");
					fireEvent("complete", event);
					break;
				case Activity.RESULT_CANCELED:
					event = createEventObject(false, FAILED, "Operation canceled");
					Log.d(LCAT, "message delivering failure");
					fireEvent("complete", event);
					break;                        
				}
			}
		}; 
		
		//---when the SMS has been delivered---
		currentActivity.registerReceiver(deliveryBroadcastReceiver, new IntentFilter(MESSAGE_DELIVERED));  
	}
	
	public KrollDict createEventObject (boolean success, int result, String resultMessage) 
	{
		KrollDict event = new KrollDict();
		event.put("success", success);
		event.put("result", result);
		event.put("resultMessage", resultMessage);

		return event;
	}
	
	// Methods
	@Kroll.method
	private boolean hasSendMessagePermission() {
	    if (Build.VERSION.SDK_INT < 23) {
	        return true;
	    }
	    Activity currentActivity = TiApplication.getInstance().getCurrentActivity();
	    if (currentActivity.checkSelfPermission(Manifest.permission.SEND_SMS) == PackageManager.PERMISSION_GRANTED) {
	        return true;
	    } 
	    return false;
	}
		
	@Kroll.method
	public void requestSendMessagePermissions(@Kroll.argument(optional=true)KrollFunction permissionCallback)
	{
		if (hasSendMessagePermission()) {
			return;
		}

		if (TiBaseActivity.cameraCallbackContext == null) {
			TiBaseActivity.cameraCallbackContext = getKrollObject();
		}
		TiBaseActivity.cameraPermissionCallback = permissionCallback;
		String[] permissions = null;
		permissions = new String[] {Manifest.permission.SEND_SMS};
		

		Activity currentActivity = TiApplication.getInstance().getCurrentActivity();		
		currentActivity.requestPermissions(permissions, TiC.PERMISSION_CODE_CAMERA);
		
	}
	
	@Kroll.method
	public void sendSMS(String recipient, String messageBody)
	{
		
		Activity currentActivity = TiApplication.getInstance().getCurrentActivity();

		Intent sentIntent = new Intent(MESSAGE_SENT);
		PendingIntent sentPI = PendingIntent.getBroadcast(currentActivity, 0,sentIntent, 0);
		
		Intent deliveredIntent = new Intent(MESSAGE_DELIVERED);
		PendingIntent deliveredPI = PendingIntent.getBroadcast(currentActivity, 0,deliveredIntent, 0);
		
		SmsManager smsManager = SmsManager.getDefault();
		
//		
		
		ArrayList<String> multipartSmsText = smsManager.divideMessage(messageBody);
		int smsSize = multipartSmsText.size();
		
		if (smsSize == 1) {
			smsManager.sendTextMessage(recipient, null, messageBody, sentPI, deliveredPI);
		}else{
			
			//Create the arraylist PendingIntents for use it.
			ArrayList<PendingIntent> sentPiList = new ArrayList<PendingIntent>(smsSize);
			ArrayList<PendingIntent> deliverPiList = new ArrayList<PendingIntent>(smsSize);
			
			for (int i=0; i<smsSize; i++) {
				sentPiList.add(sentPI);
				deliverPiList.add(deliveredPI);
			}
			
			//Try to send the sms message
			smsManager.sendMultipartTextMessage(recipient, null, multipartSmsText, sentPiList, deliverPiList);	
		}
		
	}

	
	@Kroll.method
	public void unRegister()
	{
		Activity currentActivity = TiApplication.getInstance().getCurrentActivity();
		currentActivity.unregisterReceiver(sendBroadcastReceiver);
		currentActivity.unregisterReceiver(deliveryBroadcastReceiver);
	}

}

